//------------------------------------------------------------------------------// container_Constr.cpp - содержит функции обработки контейнера//------------------------------------------------------------------------------#include "container.h"Container::Container() {    len = 0;}Container::~Container() {    for (int i = 0; i < len; ++i) {        delete cont[i];    }    len = 0;}//------------------------------------------------------------------------------// Ввод содержимого контейнера из указанного потокаvoid Container::In(std::ifstream &input) {    int type = 1;    while (!input.eof()) {        input >> type;        switch (type) {            case 1:                cont[len] = new Complex();                break;            case 2:                cont[len] = new Fractional();                break;            case 3:                cont[len] = new Polar();                break;        }        cont[len]->In(input);        ++len;    }}//------------------------------------------------------------------------------// Случайный ввод содержимого контейнераvoid Container::InRnd(int size) {    while (this->len < size) {        int type = Random() % 3;        if (type == 1) {            this->cont[this->len] = new Complex();            this->cont[this->len]->InRnd();            len++;        } else if (type == 2) {            this->cont[this->len] = new Fractional();            this->cont[this->len]->InRnd();            len++;        } else {            this->cont[this->len] = new Polar();            this->cont[this->len]->InRnd();            len++;        }    }}//------------------------------------------------------------------------------// Вывод содержимого контейнера в указанный потокvoid Container::Out(std::ofstream &ofst) {    ofst << "Container contains " <<         len << " elements." << '\n';    for (int i = 0; i < len; i++) {        ofst << i << ": ";        cont[i]->Out(ofst);    }}//------------------------------------------------------------------------------// Сортировкаvoid Container::Sort() {    for (int gap = len / 2; gap > 0; gap /= 2) {        for (int j = gap; j < len; ++j) {            Number *temp = cont[j];            int i = 0;            for (i = j;                 (i >= gap) && (cont[i - gap]->ConvertToRealNumber() < temp->ConvertToRealNumber()); i -= gap) {                cont[i] = cont[i - gap];            }            cont[i] = temp;        }    }}